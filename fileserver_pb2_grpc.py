# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import fileserver_pb2 as fileserver__pb2
import keyDistServer_pb2 as keyDistServer__pb2


class FileServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authenticate = channel.unary_unary(
                '/FileServer/Authenticate',
                request_serializer=fileserver__pb2.AuthRequest.SerializeToString,
                response_deserializer=keyDistServer__pb2.AuthResponse.FromString,
                )
        self.AutheticationComplete = channel.unary_unary(
                '/FileServer/AutheticationComplete',
                request_serializer=fileserver__pb2.AuthRequest.SerializeToString,
                response_deserializer=keyDistServer__pb2.AuthResponse.FromString,
                )
        self.TakeCommand = channel.unary_unary(
                '/FileServer/TakeCommand',
                request_serializer=fileserver__pb2.CommandRequest.SerializeToString,
                response_deserializer=fileserver__pb2.CommandResponse.FromString,
                )


class FileServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Authenticate(self, request, context):
        """Authenticate with new Machine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AutheticationComplete(self, request, context):
        """Complete authentication final request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeCommand(self, request, context):
        """Take a command, execute it and return the results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=fileserver__pb2.AuthRequest.FromString,
                    response_serializer=keyDistServer__pb2.AuthResponse.SerializeToString,
            ),
            'AutheticationComplete': grpc.unary_unary_rpc_method_handler(
                    servicer.AutheticationComplete,
                    request_deserializer=fileserver__pb2.AuthRequest.FromString,
                    response_serializer=keyDistServer__pb2.AuthResponse.SerializeToString,
            ),
            'TakeCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeCommand,
                    request_deserializer=fileserver__pb2.CommandRequest.FromString,
                    response_serializer=fileserver__pb2.CommandResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FileServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileServer/Authenticate',
            fileserver__pb2.AuthRequest.SerializeToString,
            keyDistServer__pb2.AuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AutheticationComplete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileServer/AutheticationComplete',
            fileserver__pb2.AuthRequest.SerializeToString,
            keyDistServer__pb2.AuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TakeCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FileServer/TakeCommand',
            fileserver__pb2.CommandRequest.SerializeToString,
            fileserver__pb2.CommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
